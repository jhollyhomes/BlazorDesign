<div class="fixed inset-0 z-20 w-screen overflow-x-auto">
    <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
        <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all w-full bg-red-800 sm:my-8 sm:w-full sm:max-w-lg sm:p-2">
            <div>
                <div class="mt-3 text-center sm:mt-5">
                    <h3 class="text-base font-semibold leading-6 text-gray-900" id="modal-title">Select colour</h3>
                    <div class="flex flex-row mt-3">

                        <div>
                            <button @onclick="() => SelectedWhiteColour()"class="bg-white w-6 h-6 border border-gray-400 shadow-xl ml-1">
                            </button> 
                            <button @onclick="() => SelectedBlackColour()" class="bg-black w-6 h-6 border border-gray-400 shadow-xl ml-1">
                            </button>
                        </div>

                        @foreach (var colour in colours)
                        {
                            <div>
                                @foreach (var shade in shades)
                                {
                                    <button @onclick="() => SelectedColour(colour, shade)" 
                                        class="bg-@(colour)-@(shade) w-6 h-6 border border-gray-400 shadow-xl ml-0.5">
                                    </button>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="mt-5 sm:mt-6">
                <button @onclick="OnClose" type="button" class="inline-flex w-full justify-center rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Close</button>
            </div>
        </div>
    </div>
</div>


@code {

    [Parameter, EditorRequired]
    public EventCallback OnClose { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<SelectedColour> OnColourSelected { get; set; }

    public void SelectedColour(string colour, string shade)
    {
        OnColourSelected.InvokeAsync(new SelectedColour(colour, shade)).Wait();
    }

    public void SelectedWhiteColour()
    {
        OnColourSelected.InvokeAsync(new SelectedColour("white")).Wait();
    }

    public void SelectedBlackColour()
    {
        OnColourSelected.InvokeAsync(new SelectedColour("black")).Wait();
    }

    private List<string> colours = new List<string>()
    {
        "gray",
        "red",
        "orange",
        "amber",
        "yellow",
        "lime",
        "green",
        "teal",
        "sky",
        "blue",
        "indigo",
        "purple",
        "pink",
        "rose"
    }; 

    private List<string> shades = new List<string>()
    {
        "50",
        "100",
        "200",
        "300",
        "400",
        "500",
        "600",
        "700",
        "800",
        "900",
        "950",
    };
}

